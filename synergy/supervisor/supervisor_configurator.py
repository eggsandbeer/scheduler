from __future__ import print_function
import pymongo
from synergy.db.manager import ds_manager
from synergy.db.model.box_configuration import BOX_ID, PROCESS_NAME

__author__ = 'Bohdan Mushkevych'

import re
import sys

from synergy.conf import context, settings
from synergy.supervisor import supervisor_helper
from synergy.supervisor.supervisor_constants import PROCESS_SUPERVISOR, COLLECTION_BOX_CONFIGURATION
from synergy.system.data_logging import get_logger


CONFIG_FILE_TEMPLATE = (
    '# This file was auto-generated by Synergy Supervisor. Do not edit it manually'
    '# This file is expected to be located at: /etc/'
    '# BOX_ID identifies a box in a cluster supervised by Synergy Scheduler'
    'BOX_ID={0}'
    ''
)


class SupervisorEntry(object):
    def __init__(self, process_name):
        if process_name not in context.process_context:
            raise ValueError('SupervisorEntry: process {0} is not found in process_context. Aborting'
                             .format(process_name))

        self.logger = get_logger(PROCESS_SUPERVISOR)
        self.process_name = process_name
        self.re_boxes = context.process_context[process_name].present_on_boxes
        self.re_co_boxes = []  # compiled RE of boxes where the process should be present

        for re_box in self.re_boxes:
            try:
                if isinstance(re_box, str):
                    re_box = re_box.lower()
                    self.re_co_boxes.append(re.compile(re_box))
                elif isinstance(re_box, int):
                    self.re_co_boxes.append(re_box)
                else:
                    raise ValueError('SupervisorEntry support (string, integer) values. Type {0} unsupported'
                                     .format(type(re_box)))
            except TypeError:
                self.logger.warn('SupervisorEntry compilation error for {0}'.format(re_box))

    def is_present(self, box_id):
        is_present = False
        for co_re_box in self.re_co_boxes:
            if isinstance(co_re_box, int):
                is_present = co_re_box == box_id

            else:
                box_id = box_id.lower()
                if co_re_box.search(box_id):
                    is_present = True

            if is_present:
                break

        return is_present


class SupervisorConfigurator(object):
    def __init__(self):
        super(SupervisorConfigurator, self).__init__()
        self.logger = get_logger(PROCESS_SUPERVISOR)
        self.process_map = dict()
        self.box_id = supervisor_helper.get_box_id(self.logger)
        for process_name in context.process_context:
            self.process_map[process_name] = SupervisorEntry(process_name)

    def get_process_names(self):
        pass

    def set_box_id(self, box_id):
        config_file_name = settings.settings['config_file']
        try:
            with open(config_file_name, mode='w') as config_file:
                config_file.write(CONFIG_FILE_TEMPLATE.format(box_id))
        except Exception as e:
            print('Unable to create BOX_ID file at: {0}, because of: {1}'.format(config_file_name, e), file=sys.stderr)

    def _change_state(self, process_name, new_state):
        import logging
        from synergy.db.dao.box_configuration_dao import BoxConfigurationDao
        from synergy.supervisor import supervisor_helper

        box_id = supervisor_helper.get_box_id(logging)
        message = 'INFO: Supervisor configuration: setting state {0} for process {1} \n'.format(new_state, process_name)
        sys.stdout.write(message)

        bc_dao = BoxConfigurationDao(logging)
        box_config = bc_dao.get_one(box_id)
        box_config.set_process_state(process_name, new_state)
        bc_dao.update(box_config)


    def mark_for_start(self, process_name):
        self._change_state(process_name, box_configuration.STATE_ON)

    def mark_for_stop(self, process_name):
        self._change_state(process_name, box_configuration.STATE_OFF)

    def init_db(self):
        self.logger.info('Starting *synergy.box_configuration* table init')

        ds = ds_manager.ds_factory(self.logger)
        ds._db_client.drop_collection(COLLECTION_BOX_CONFIGURATION)
        self.logger.info('*synergy.box_configuration* table has been dropped')

        connection = ds.connection(COLLECTION_BOX_CONFIGURATION)
        connection.create_index([(BOX_ID, pymongo.ASCENDING), (PROCESS_NAME, pymongo.ASCENDING)], unique=True)

        self.logger.info('*synergy.box_configuration* db has been recreated')

    def query(self):
        from synergy.db.dao.box_configuration_dao import BoxConfigurationDao

        bc_dao = BoxConfigurationDao(self.logger)
        print('\nSupervisor Snapshot for BOX_ID={0}:\n'.format(self.box_id), file=sys.stdout)
        box_configuration = bc_dao.get_one(self.box_id)

        for process_name in box_configuration.process_list:
            print('{1}:{2} \n'.format(process_name, box_configuration.process_list[process_name]), file=sys.stdout)
        print('\n')
